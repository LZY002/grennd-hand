package leetcode;
	/**
	 * @author LI
	   @version 根据每个字母出现的次数来重新排列字母的顺序
	 */ 
 class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>(); // 存储每个字母出现的次数
        for (char c : s.toCharArray()) {  //将字符串变为数组形式
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        List<Character>[] buckets = new ArrayList[s.length() + 1]; // 存储每个字母的数组，下角标字母出现的次数
        for (Map.Entry<Character, Integer> entry : map.entrySet()) { // 通过Map.Entry这个接口（等同于类）得到Map的键值对
            char c = entry.getKey();
            int count = entry.getValue();
            //对次数进行排序
	    if (buckets[count] == null) {
                buckets[count] = new ArrayList<>();
            }
            buckets[count].add(c);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = buckets.length - 1; i >= 0; --i) {
            if (buckets[i] != null) {
                for (char c : buckets[i]) {
                    for (int j = 0; j < i; ++j) {
                        sb.append(c);
                    }
                }
            }
        }
        return sb.toString();
    }
}
