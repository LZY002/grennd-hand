package leetcode;
	/**
	 * @author LI
	   @version 字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。
              返回一个表示每个字符串片段的长度的列表。
	 */ 
   class Solution {
public List<Integer> partitionLabels(String S) {
    //先找到首字母最后出现的位置，然后遍历从首字母第一次出现到最后一次出现之间的位置，
    // 看是否有元素最后出现的位置超过首字母最后出现的位置，如果有更新最后出现的位置下标，如果没有这段区间可以划分为一个段，重复以上步骤即可得到最终结果。
    if (S == null || S.length() == 0) {
        return new ArrayList<Integer>();
    }
    List<Integer> list = new ArrayList<>(); // 存储划分区间的元素数量
    for (int i = 0; i < S.length();) {
        int index = S.lastIndexOf(S.charAt(i)); //此元素最后出现的下角标
        for (int j = i+1; j < index; j++) {
            //判断在下角标之前的元素最后出现的下角标与此元素的下角标的大小
            if (S.lastIndexOf(S.charAt(j)) > index) {
                index=S.lastIndexOf(S.charAt(j));
            }
        }
        list.add(index - i + 1); // 将划分区间的元素数量加入到链表中
        i=index+1; //从index=index+1元素开始划分
    }
    return list;
}
