package leetcode;
	/**
	 * @author LI
	   @version 给两个给两个非空链表，高位在表头，两个链表相加
   * Definition for singly-linked list.
   * public class ListNode {
   *     int val;
   *     ListNode next;
   *     ListNode(int x) { val = x; }
   * }
	 */ 
   class Solution {
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //判断链表是否为空
    if (l1 == null || l2 == null) {
        return l1==null?l2:l1;
    }
    创建两个栈存储链表中的每个元素，先进后出，这样就不用反转链表了
    Stack<Integer> stack1 = new Stack<>();
    Stack<Integer> stack2 = new Stack<>();
    int ca=0; //表示是否有进位
    ListNode node=null; // 头指针
    // 进栈
    while (l1 != null) {
        stack1.push(l1.val);
        l1=l1.next;
    }
    while (l2 != null) {
        stack2.push(l2.val);
        l2=l2.next;
    }
    while (!stack1.isEmpty() || !stack2.isEmpty()) {
        int s1=stack1.isEmpty()?0:stack1.pop();
        int s2=stack2.isEmpty()?0:stack2.pop();
     // 两个数和进位数相加
       ListNode cur = new ListNode((s1 + s2 + ca) % 10);
     //改变头指针的位置
        cur.next=node;
        node=cur;
     //判断是否有进位   
        ca=(s1+s2+ca)/10;
    }
    判断最高位相加后是否有进位
    if (ca == 1) {
        ListNode cur = new ListNode(1);
        cur.next=node;
        node=cur;
    }
    return node;
}
