package leetcode.medium;
/**
 * @author LI
   @version 给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 
   (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水
 */
  
public class MaxArea {
	public int maxArea(int[] height){
		int len = height.length; //数组长度
		int max = 0,low = 0,high = len - 1; // max 最大装水量 low 水桶前端的端点 high 水桶后端的端点 
		while(low < high){
			int lowMax = height[low],highMax = height[high]; // lowmax 水桶前端的高度 highmax 水桶后端的高度
			int water = (high - low) * (lowMax < highMax ? lowMax : highMax); // 计算所容纳的水量
			max = water > max ? water : max; //比较取最大存水量
			
			if(height[low] <= height[high]){    //如果前端的高度比后端的低
				while(low < high && height[low] <= lowMax) // 前端向后找到比lowmax高的端点
					low++;
			}else{ //如果后端比前端低
				while(high > low && height[high] <= highMax) // 后端向前找到比highmax高的端点
					high--;
			}
		}
		
		return max;
	}
}
